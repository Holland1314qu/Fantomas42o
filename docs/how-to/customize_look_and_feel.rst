================================
Customize Zinnia's look and feel
================================

The templates provided for Zinnia are simple but complete and as generic as
possible. But you can easily change them by
`specifying a template directory`_. If you are not familiar with Django,
the part two of the excellent Django tutorial explains in detail
how to proceed for `customizing the look and feel`_ of the
:mod:`~django.contrib.admin` app, in Zinnia it's the same thing.

A good starting point is to copy-paste the :file:`zinnia/base.html` template,
and edit the :ttag:`extends` instruction for fitting to your skin.

.. note::
	* The main content is displayed in block named ``content``.
	* Additional datas are displayed in a block named ``sidebar``.

You can also create your own app containing some Zinniaâ€™s templates based
on inheritance. For example you can find these two applications which aim
transforming Zinnia's templates to be HTML5 ready, which can be a
good starting point to make your own at:

* `Zinnia-theme-html5`_.
* `Django Blog Quintet`_.

.. warning::
   .. versionchanged:: 0.9

   `Django Blog Quintet`_ is no longer compatible with Zinnia, but still be
   a good example.

Now that we have seen the basic mechanizmes to add and customize Zinnia's
templates we will see in details the different possibilities in the
customization process.

.. _css-customization:

CSS customizations
------------------

Most of the times the customization process of Zinnia consists of changing
the cascading style sheet of the differents pages delivered by the Weblog.

First of all you have to note that each pages of the Weblog has serveral
classes applied on the ``<body>`` markup. For examples if the document has
paginated entries, the ``paginated`` and ``page-{id}`` classes will be
applied to the ``<body>``. Many classes are used within the default
templates so should take a look on it, maybe it will be useful for you.

Secondly all the documents served by Zinnia has the ``zinnia`` class name
on the ``<body>``. If you remove this class, all the default CSS provided
by Zinnia will not be apply. And if you add it on templates provided by
third-party applications, the Zinnia's style will be applied. Pretty
usefull, no ?

Of course adding or removing classes can easily be done in your own
templates by overriding the block named ``body-class``.

You also have to note that a real effort has be done to provide clean and
valid HTML documents, without redondant and useless classes or IDs
overweighting the document respecting the **presentation-free markup**
rule.

Now that you have all of these information in mind, you can add new
cascading style sheets into your templates, containing your customization
rules and of course remove the default CSS files provided by Zinnia if needed.

.. _compass-customization:

Compass and Sass
----------------

If you have take a look on :file:`zinnia/static/zinnia/css/screen.css` you
probably have noted that the CSS is compressed. This for one good reason,
for don't giving you the idea to edit directly this file for adding your
CSS rules. This file is generated by the awesome `Compass`_ tool and you must
take a look on `this video tutorial`_ if your are not familiar with it.

Aside of :file:`screen.css`, you can see a folder named ``sass``, this
folder is organized like this: ::

  |-- config
  |   `-- _base.scss
  |-- dashboard_zinnia.scss
  |-- ie.scss
  |-- mixins
  |   |-- _delimited-list.scss
  |   |-- _icons.scss
  |   |-- _slider-buttons.scss
  |   `-- _tag-cloud.scss
  |-- partials
  |   |-- _breadcrumbs.scss
  |   |-- _entry.scss
  |   |-- _footer.scss
  |   |-- _forms.scss
  |   |-- _header.scss
  |   |-- _linkbacks.scss
  |   |-- _page.scss
  |   |-- _paginator.scss
  |   |-- _sidebar.scss
  |   |-- _slider.scss
  |   `-- _two-cols.scss
  |-- print.scss
  `-- screen.scss

The ``partials`` directory will contains all the **partials** used to build
the CSS, the **mixins** will contain reusable mixins like the tag-cloud and
finally the **config** directory will contains all the configurable
parameters. :file:`screen.scss` will include all these files into a single
CSS document.

This organization allow you to easily customize the default Zinnia's CSS by
doing a copy of these files or reuse some parts of the Zinnia's CSS into
third-paty templates.

.. _special-templates:

Special templates
-----------------

Since the beginning of Zinnia, the development has been influenced by the
idea of **Power templates for easy rendering**. Customizing the templates
must be possible, easy and fast. So Zinnia has a feature for returning
custom templates depending on the view's context.

.. _queryset-templates:

.. _archives-templates:

.. _entry-detail-templates:

.. _changing-templates:

Changing templates
------------------

Maybe CSS customizations and adding markups into the templates are not
enought because you need to change an important part of the templates or
you simply don't want to use it.

All the front views bundled in Zinnia are customizables, so changing the
template used to render the view is pretty easy and can be a good solution.


.. _`specifying a template directory`: https://docs.djangoproject.com/en/dev/ref/templates/api/#loading-templates
.. _`customizing the look and feel`: https://docs.djangoproject.com/en/dev/intro/tutorial02/#customize-the-admin-look-and-feel
.. _`Zinnia-theme-html5`: https://github.com/Fantomas42/zinnia-theme-html5
.. _`Django Blog Quintet`: https://github.com/franckbret/django-blog-quintet
.. _`Compass`: http://compass-style.org/
.. _`this video tutorial`: http://vimeo.com/11671458
